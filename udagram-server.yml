Description: >
    Tabi Idris / Udacity
    This template deploys the servers, with the apropriate security groups needed to define 
    inbound(ingress secgrp) and outbound(egress secgrp) trafic.

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

Resources:

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdacityS3ReadOnlyEC2

  UdagramSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to udagram load balancer
        VpcId:
          Fn::ImportValue: 
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http and  ssh to udagram from localhost only
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
          
  WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            aws s3 cp s3://udacity-demo-1/udacity.zip .
            unzip -o udacity.zip
        ImageId: ami-005bdb005fb00e791
        IamInstanceProfile: !Ref ProfileWithRolesForOurApp
        SecurityGroups:
        - Ref: UdagramSecurityGroup
        InstanceType: t3.small
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

  WebAppGroup:
      Type: AWS::AUtoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnviroNETS}"
        LaunchConfigurationName:
          Ref: WebAppLaunchConfig
        MinSize: "1"
        MaxSize: "4"
        # TargetGroupARNs:
        # - Ref: WebAppTargetGroup
    
  WebAPPLB:
    Type: AWS::ElasticLoadBalincingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "{EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "{EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  
  Listenner:
    Type: AWS::ElasticLoadBalincingV2::Listenner
    Properties:

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"