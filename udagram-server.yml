Description: >
    Tabi Idris / Udacity
    This template deploys the servers, with the apropriate security groups needed to define 
    inbound(ingress secgrp) and outbound(egress secgrp) trafic.

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

Resources:

  UdagramLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to udagram load balancer
        VpcId:
          Fn::ImportValue: 
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  
  UdagramServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http and  ssh to udagram from localhost only
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: !Sub "${EnvironmentName}-BASTION0-CIDR"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Fn::ImportValue: !Sub "${EnvironmentName}-BASTION1-CIDR"
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
          
  UdagramLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
             #!/bin/bash
             apt-get update -y
             apt-get install unzip awscli -y
             apt-get install apache2 -y
             systemctl start apache2.service
             sudo rm /var/www/html/index.html
             sudo aws s3 cp s3://udacity-udagram/udagram.zip /var/www/html
             sudo unzip /var/www/html/udagram.zip -d /var/www/html
             systemctl restart apache2.service
        ImageId: ami-06f2f779464715dc5
        IamInstanceProfile:
          Fn::ImportValue: !Sub "${EnvironmentName}-IAM-NAME"
        SecurityGroups:
        - Ref: UdagramServerSecurityGroup
        InstanceType: t3.medium
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
            DeleteOnTermination: true
            VolumeType: "gp2"

  UdagramASG:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRI1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRI2-SN"
        LaunchConfigurationName:
          Ref: UdagramLaunchConfig
        MinSize: 4
        MaxSize: 4
        TargetGroupARNs:
         - Ref: UdagramTargetGroup
    
  UdagramLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}c"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: UdagramLBSecurityGroup
  
  UdagramListenner:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref UdagramTargetGroup
          LoadBalancerArn: !Ref UdagramLB
          Port: 80
          Protocol: HTTP

  UdagramLR:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref UdagramTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref UdagramListenner
      Priority: 1

  UdagramAppScaleUp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref UdagramASG
      Cooldown: 300
      ScalingAdjustment: 1

  UdagramAppScaleDown:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref UdagramASG
      Cooldown: 300
      ScalingAdjustment: -1

  UdagramTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"


  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt [UdagramLB, DNSName]
            Id: !GetAtt [UdagramLB, DNSName]
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
        Enabled: "true"
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: "/error.html"
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: "/error.html"
        DefaultRootObject: index.html
        Logging:
          IncludeCookies: "false"
          Bucket:
            Fn::Join:
              - ""
              - - Fn::ImportValue: !Sub ${EnvironmentName}-S3-LOGS
        Restrictions:
          GeoRestriction:
            RestrictionType: none
            Locations: []
        DefaultCacheBehavior:
          AllowedMethods: [HEAD, GET]
          MinTTL: "0"
          MaxTTL: "0"
          DefaultTTL: "0"
          TargetOriginId: !GetAtt [UdagramLB, DNSName]
          SmoothStreaming: "false"
          ForwardedValues:
            QueryString: "true"
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: "true"
        WebACLId:
          Fn::Join:
            - ""
            - - Fn::ImportValue: !Sub ${EnvironmentName}-WEBACL

Outputs:
  Website:
    Description: The Public DNS for the EC2 Instance
    Value: !Join ["", ["http://", !GetAtt [UdagramLB, DNSName]]]

  UdagramAppASG:
    Description: "Group ID of Auto Scaling Group Reference ID"
    Value: !Ref "UdagramASG"

  UdagramAppScaleUp:
    Description: "Policy ID of Auto Scaling Up"
    Value: !Ref "UdagramAppScaleUp"

  UdagramAppScaleDown:
    Description: "Policy ID of Auto Scaling Down"
    Value: !Ref "UdagramAppScaleDown"
